{
  "hash": "e5ed52126e5329a57403dba18d8879b9",
  "result": {
    "markdown": "---\ntitle: \"Wicked Concepts\"\nauthor: \"Rylyn Williams\"\nformat: \n  docx: {}\n---\n\n\n\n\n\n\n\n\n\n\n## Data wrangling\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read in data tables from survey, 35 by 9 data table\nq1 <- read_csv(\"data/q1.csv\", show_col_types = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nq2 <- read_csv(\"data/q2.csv\", show_col_types = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nq3 <- read_csv(\"data/q3.csv\", show_col_types = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nq4 <- read_csv(\"data/q4.csv\", show_col_types = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\nq5 <- read_csv(\"data/q5.csv\", show_col_types = FALSE )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `` -> `...1`\n```\n:::\n\n```{.r .cell-code}\n# remove total row so that it's 35 by 8, including column of concepts\nq1 <- select(q1, -9)\nq2 <- select(q2, -9)\nq3 <- select(q3, -9)\nq4 <- select(q4, -9)\nq5 <- select(q5, -9)\n\nhead(q1, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  ...1        Imperialism Capitalism Racism Colonizaton Housing Education\n  <chr>             <dbl>      <dbl>  <dbl>       <dbl>   <dbl>     <dbl>\n1 Imperialism          10         15     12           5       4         5\n2 Capitalism            9         10     12           4       3         5\n# ℹ 1 more variable: Infrastructure <dbl>\n```\n:::\n\n```{.r .cell-code}\nhead(q2, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  ...1        `Criminal Justice` Transportation Economy `Income/wealth`\n  <chr>                    <dbl>          <dbl>   <dbl>           <dbl>\n1 Imperialism                 12              5      11               8\n2 Capitalism                   7              6       8               9\n# ℹ 3 more variables: `Corporate wealth` <dbl>, `Fed/Gov't Structure` <dbl>,\n#   `Gun Control` <dbl>\n```\n:::\n\n```{.r .cell-code}\nhead(q3, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  ...1    Banking `Voting Access` `Climate Change` `Child Poverty` Nationalizing\n  <chr>     <dbl>           <dbl>            <dbl>           <dbl>         <dbl>\n1 Imperi…       9               4                8               4            11\n2 Capita…       8               7                5               6             9\n# ℹ 2 more variables: `Digital lit` <dbl>, AI <dbl>\n```\n:::\n\n```{.r .cell-code}\nhead(q4, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  ...1   Immigration Misinformation `Pollution & Plastic` Indigenous Sovereign…¹\n  <chr>        <dbl>          <dbl>                 <dbl>                  <dbl>\n1 Imper…          10             10                     6                      7\n2 Capit…           7              7                     8                      5\n# ℹ abbreviated name: ¹​`Indigenous Sovereignty`\n# ℹ 3 more variables: `Weakening of Global West` <dbl>, `Public Trust` <dbl>,\n#   `Homeless Rights` <dbl>\n```\n:::\n\n```{.r .cell-code}\nhead(q5, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 8\n  ...1      `Welfare Systems` `Civil Rights` `Journalism/media` `Foreign Policy`\n  <chr>                 <dbl>          <dbl>              <dbl>            <dbl>\n1 Imperial…                 8             10                  6               10\n2 Capitali…                 5              6                  4                8\n# ℹ 3 more variables: `Insider Trading` <dbl>, `Generational Wealth` <dbl>,\n#   Eurocentrism <dbl>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join columns by term column, to create 35 by 35\nconcepts <- left_join(q1,q2,by=\"...1\")\nconcepts <- left_join(concepts,q3,by=\"...1\")\nconcepts <- left_join(concepts,q4,by=\"...1\")\nconcepts <- left_join(concepts,q5,by=\"...1\")\nconcepts <- select(concepts, -1)\nrownames(concepts)<-colnames(concepts)\nnamesss <- colnames(concepts)\n```\n:::\n\n`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconcepts <- as.matrix(concepts)\n#replace NA's with Zero as the value is not missing, there is just no tie so there weight it 0\nconcepts[is.na(concepts)] <- 0\n# Set diag to false to remove self loops\ncg <- graph_from_adjacency_matrix(concepts)\n#Save the graph as a data frame that shows each ties and their weight.\ncg_frame <-get.data.frame(cg)\n```\n:::\n\n### Create a tnet object out of single counted actor ties, with weights being the count of the tie appearence\n\n::: {.cell}\n\n```{.r .cell-code}\n#Identify unique vertices for the purpose of \nunique_vertices <- unique(c(cg_frame$from, cg_frame$to))\nvalid_vertices <- unique_vertices[!duplicated(unique_vertices) & nchar(unique_vertices) > 0]\n\n# Create an empty graph\ncg_graph <- graph(edges = numeric(0), directed = FALSE)\n\n# Add vertices to the graph\ncg_graph <- add_vertices(cg_graph, nv = length(valid_vertices), name = valid_vertices)\n\n# Count the occurrences of each unique tie\nties_count <- table(apply(cg_frame, 1, function(x) paste(sort(x), collapse = \"-\")))\n\n# Add subsequent ties of the same kind to the count of the first instance\nunique_ties <- unique(apply(cg_frame, 1, function(x) paste(sort(x), collapse = \"-\")))\nfor (tie in unique_ties) {\n  if (ties_count[tie] > 1) {\n    first_instance <- which(apply(cg_frame, 1, function(x) paste(sort(x), collapse = \"-\")) == tie)[1]\n    ties_count[tie] <- ties_count[tie] + (ties_count[tie] - 1)\n    ties_count[tie] <- ties_count[tie] - 1  # Subtract 1 because we're counting the first instance as unique\n  }\n}\n# Add vertices to the graph\ncg_graph <- add_vertices(cg_graph, nv = length(valid_vertices), name = valid_vertices)\n\n# Count the occurrences of each unique tie\nties_count <- table(apply(cg_frame, 1, function(x) paste(sort(x), collapse = \"-\")))\n\nunique_ties <- names(ties_count)\ntie_parts <- strsplit(unique_ties, \"-\")\nfrom_vertices <- sapply(tie_parts, `[`, 1)\nto_vertices <- sapply(tie_parts, `[`, 2)\nweights <- as.vector(ties_count)\n\n# Create a data frame\ncg_tie_df <- data.frame(from = from_vertices, to = to_vertices, weight = weights)\n\n# Print the data frame\nhead(cg_tie_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  from             to weight\n1   AI             AI      4\n2   AI        Banking      6\n3   AI     Capitalism     12\n4   AI  Child Poverty      6\n5   AI   Civil Rights      9\n6   AI Climate Change     12\n```\n:::\n:::\n\n### creating tnet and statnet object\n\n::: {.cell}\n\n```{.r .cell-code}\ncg_tie_df$from <- as.integer(as.factor(cg_tie_df$from))\ncg_tie_df$to <- as.integer(as.factor(cg_tie_df$to))\n\n# Create the network object\ncg_tnet <- as.tnet(cg_tie_df, type = \"weighted one-mode tnet\")\n```\n:::\n\n\n## Node-Level Measures\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Out Degree/ out-strength \ncon.outdegree <- degree_w(cg_tnet, measure = c(\"degree\", \"output\"), type=\"out\", alpha = 1)\n#In Degree/ In-strength \ncon.indegree <- degree_w(cg_tnet, measure = c(\"degree\", \"output\"), type=\"in\", alpha = 1)\n#closeness\nc_close <- closeness_w(cg_tnet, directed =NULL, gconly = FALSE, alpha = 1)\n#betweeness\nc_btwn <- betweenness_w(cg_tnet, directed =NULL, alpha = 1)\n#constraints\n\n#Rename the columns because the function output names the columns the same regardless of the IN;Out status\ncolnames(con.outdegree)[2] <- \"Out-Strength\"\ncolnames(con.outdegree)[3] <- \"Out-Degree\"\ncolnames(con.indegree)[2] <- \"In-Strength\"\ncolnames(con.indegree)[3] <- \"In-Degree\"\n\n\n#Join the node measures to the same data frame\ncon.nodes <-left_join(as.data.frame(con.outdegree), as.data.frame(con.indegree), by= \"node\")\ncon.nodes <-left_join(as.data.frame(con.nodes), as.data.frame(c_close), by= \"node\")\ncon.nodes <-left_join(con.nodes, as.data.frame(c_btwn), by= \"node\")\n\n\n#temporary rename of node column to \"name\" to join the evigenor centrality for each nodes to the dataset and then \"node\" was replaced as the variable name for the nodes\ncolnames(con.nodes)[1] <- \"name\"\ncg.stat <- as.network.matrix(cg_tnet) \nset.vertex.attribute(cg.stat, \"name\",namesss) \ncon.nodes <- left_join(con.nodes, get.eigen(cg.stat), by = \"name\")\ncolnames(con.nodes)[1] <- \"node\"\n\n\nhead(con.nodes, 15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   node Out-Strength Out-Degree In-Strength In-Degree closeness n.closeness\n1     1           34        277           0         0  28.35788   0.8340552\n2     2           33        365           1         6  35.96357   1.0577521\n3     3           32        462           2        28  45.11392   1.3268801\n4     4           31        339           3        28  33.69244   0.9909542\n5     5           30        331           4        52  32.79148   0.9644554\n6     6           29        276           5        51  27.54074   0.8100219\n7     7           28        245           6        60  24.57148   0.7226907\n8     8           27        314           7        99  30.99681   0.9116709\n9     9           26        319           8        94  31.62296   0.9300871\n10   10           25        230           9        87  23.55165   0.6926956\n11   11           24        322          10       148  31.62439   0.9301290\n12   12           23        200          11       108  20.01304   0.5886190\n13   13           22        218          12       117  21.67877   0.6376110\n14   14           20        205          13       167  20.95682   0.6163771\n15   15           20        193          14       143  19.20735   0.5649219\n   betweenness eigen eigen.rc eigen.dc\n1          0.0   NaN      NaN      NaN\n2          0.0   NaN      NaN      NaN\n3          5.0   NaN      NaN      NaN\n4          0.0   NaN      NaN      NaN\n5          0.0   NaN      NaN      NaN\n6          0.0   NaN      NaN      NaN\n7          0.0   NaN      NaN      NaN\n8          4.5   NaN      NaN      NaN\n9          2.0   NaN      NaN      NaN\n10         0.0   NaN      NaN      NaN\n11        11.5   NaN      NaN      NaN\n12         0.0   NaN      NaN      NaN\n13         0.0   NaN      NaN      NaN\n14         5.5   NaN      NaN      NaN\n15         0.0   NaN      NaN      NaN\n```\n:::\n:::\n\n\n## Strucutual Equivalnce\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#STRUCTUAL Equivalence \ncg.se <-equiv.clust(cg.stat,\n                          equiv.fun = \"sedist\",\n                          method = \"hamming\", \n                          mode = \"graph\")\nplot(cg.se,labels = cg.se$glabels)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-10-1.png)\n:::\n\n```{.r .cell-code}\n#Average Cluster Method\ncg.ase <- equiv.clust(cg.stat,\n                          equiv.fun = \"sedist\",\n                      cluster.method = \"average\",\n                          method = \"hamming\", \n                          mode = \"graph\")\nplot(cg.ase, cg.ase$glabels)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-10-2.png)\n:::\n\n```{.r .cell-code}\n#Single Cluster Method\ncg.sse<- equiv.clust(cg.stat,\n                          equiv.fun = \"sedist\",\n                      cluster.method = \"single\",\n                          method = \"hamming\", \n                          mode = \"graph\")\nplot(cg.sse,labels = cg.sse$glabels)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-10-3.png)\n:::\n\n```{.r .cell-code}\n# Ward.D method\ncg.wse<- equiv.clust(cg.stat,\n                          equiv.fun = \"sedist\",\n                      cluster.method = \"ward.D\",\n                          method = \"hamming\", \n                          mode = \"graph\")\nplot(cg.wse,labels = cg.wse$glabels)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-10-4.png)\n:::\n:::\n\n\n## Partitioning\n\n### Height equal to 15\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Partitioning regular clustering - 15\nplot(cg.se,labels = cg.se$glabels)\nrect.hclust(cg.se$cluster, h = 15)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-11-1.png)\n:::\n\n```{.r .cell-code}\n#Partitioning Average Cluster Method - 15\nplot(cg.ase,labels = cg.ase$glabels)\nrect.hclust(cg.ase$cluster, h = 15)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-11-2.png)\n:::\n\n```{.r .cell-code}\n#Partitioning Single Cluster Method - 15\nplot(cg.sse,labels = cg.sse$glabels)\nrect.hclust(cg.sse$cluster, h = 15)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-11-3.png)\n:::\n\n```{.r .cell-code}\n#Partitioning Ward.D method -15\nplot(cg.wse,labels = cg.wse$glabels)\nrect.hclust(cg.se$cluster, h = 15)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-11-4.png)\n:::\n:::\n\n\n### Height equal to 10\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Partitioning regular clustering -10\nplot(cg.se,labels = cg.se$glabels)\nrect.hclust(cg.se$cluster, h = 10)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-12-1.png)\n:::\n\n```{.r .cell-code}\n#Partitioning Average Cluster Method -10\nplot(cg.ase,labels = cg.ase$glabels)\nrect.hclust(cg.ase$cluster, h = 10)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-12-2.png)\n:::\n\n```{.r .cell-code}\n#Partitioning Single Cluster Method -10\nplot(cg.sse,labels = cg.sse$glabels)\nrect.hclust(cg.sse$cluster, h = 10)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-12-3.png)\n:::\n\n```{.r .cell-code}\n#Partitioning Ward.D method -10\nplot(cg.wse,labels = cg.wse$glabels)\nrect.hclust(cg.se$cluster, h = 10)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-12-4.png)\n:::\n:::\n\n\n## BlockModeling\n\n### Height at 15 k=3\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#testing block model\nblock_se <-blockmodel(cg.stat, cg.se, k=3, h=15)\nblock_ase <-blockmodel(cg.stat, cg.ase, k=3, h=15)\nblock_sse <-blockmodel(cg.stat, cg.sse, k=3, h=15)\nblock_wse <-blockmodel(cg.stat, cg.wse, k=5, h=15) #tryin out 5\n\n#View models\nplot.block(block_se, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-13-1.png)\n:::\n\n```{.r .cell-code}\nplot.block(block_ase, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-13-2.png)\n:::\n\n```{.r .cell-code}\nplot.block(block_sse, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-13-3.png)\n:::\n\n```{.r .cell-code}\nplot.block(block_wse, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-13-4.png)\n:::\n:::\n\n\n### Height at 10, k=3\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#testing block model\nblock_se <-blockmodel(cg.stat, cg.se, k=3, h=10)\nblock_ase <-blockmodel(cg.stat, cg.ase, k=3, h=10)\nblock_sse <-blockmodel(cg.stat, cg.sse, k=3, h=10)\nblock_wse <-blockmodel(cg.stat, cg.wse, k=5, h=10) #tryin out 5\n\n#View models\nplot.block(block_se, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-14-1.png)\n:::\n\n```{.r .cell-code}\nplot.block(block_ase, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-14-2.png)\n:::\n\n```{.r .cell-code}\nplot.block(block_sse, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-14-3.png)\n:::\n\n```{.r .cell-code}\nplot.block(block_wse, cex.lab=.5)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-14-4.png)\n:::\n:::\n\n\n## Let's Plot this\n\n### Statnet\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# chosen blockmodel and chose partition partitions\ncg_mod <- blockmodel(cg.stat, cg.se, k=5)\n# assign block membership to vertex attribute\ncg.stat%v%\"role\" <- cg_mod$block.membership[match(cg.stat%v%\"vertex.names\",\n                                                     cg_mod$plabels)]\n\nGGally::ggnet2(cg.stat,\n               node.color = \"role\",\n               node.size = degree(cg.stat, gmode = \"graph\"),\n               node.label = \"vertex.names\",\n               node.alpha = .7)\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-15-1.png)\n:::\n:::\n\n\n### igraph\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncg.ig <- graph_from_data_frame(cg_tnet)\nV(cg.ig)$role <- cg_mod$block.membership[match(V(cg.ig)$name, cg_mod$plabels)]\nplot.igraph(cg.ig,\n            vertex.color = V(cg.ig)$role,\n            vertex.size = 0.5+(igraph::degree(cg.ig)*0.5))\n```\n\n::: {.cell-output-display}\n![](WickedConcepts_files/figure-docx/unnamed-chunk-16-1.png)\n:::\n:::\n",
    "supporting": [
      "WickedConcepts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}