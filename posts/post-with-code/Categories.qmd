---
title: "Final Network Graphs by Categories"
author: "Rylyn Williams"
format: 
  html: 
    df-print: paged
    embed-resources: true
    code-fold: true
    self-contained-math: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE)
```

```{r include=FALSE}
library(tidyverse)
library(haven)
library(readr)
library(readxl)
library(tnet)
library(igraph)
library(statnet)
library(GGally)
library(centiserve)
options(scipen=999)
```



```{r include=FALSE}
q1 <- read_csv("data/q1.csv", show_col_types = FALSE)
q2 <- read_csv("data/q2.csv", show_col_types = FALSE)
q3 <- read_csv("data/q3.csv", show_col_types = FALSE)
q4 <- read_csv("data/q4.csv", show_col_types = FALSE)
q5 <- read_csv("data/q5.csv", show_col_types = FALSE )
# remove total row so that it's 35 by 8, including column of concepts
q1 <- select(q1, -9)
q2 <- select(q2, -9)
q3 <- select(q3, -9)
q4 <- select(q4, -9)
q5 <- select(q5, -9)
concepts <- left_join(q1,q2,by="...1")
concepts <- left_join(concepts,q3,by="...1")
concepts <- left_join(concepts,q4,by="...1")
concepts <- left_join(concepts,q5,by="...1")
concepts <- select(concepts, -1)
rownames(concepts)<-colnames(concepts)
names.attr <- tibble(id = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35), name = colnames(concepts))

concepts <- as.matrix(concepts)
#replace NA's with Zero as the value is not missing, there is just no tie so there weight it 0
concepts[is.na(concepts)] <- 0
# Set diag to false to remove self loops
cg <- graph_from_adjacency_matrix(concepts)
#Save the graph as a data frame that shows each ties and their weight.
cg_frame <-get.data.frame(cg)
unique_vertices <- unique(c(cg_frame$from, cg_frame$to))
valid_vertices <- unique_vertices[nchar(unique_vertices) > 0]

# Create an empty graph
cg_graph <- graph(edges = numeric(0), directed = FALSE)

# Add vertices to the graph
cg_graph <- add_vertices(cg_graph, nv = length(valid_vertices), name = valid_vertices)

# Count tie occurrences, the number of times that tie occurs, will be it's strength/weight
ties_count <- table(apply(cg_frame, 1, function(x) paste(sort(x), collapse = "-")))

# Adjust tie counts for subsequent ties # this will count reverse ties so B to A where the code above check A to B
unique_ties <- unique(apply(cg_frame, 1, function(x) paste(sort(x), collapse = "-")))

for (tie in unique_ties) {
  ties_count[tie] <- ifelse(ties_count[tie] > 1, ties_count[tie], ties_count[tie] + 1)
}

# Process ties data
tie_parts <- strsplit(names(ties_count), "-")
from_vertices <- sapply(tie_parts, `[`, 1)
to_vertices <- sapply(tie_parts, `[`, 2)
weights <- as.vector(ties_count)

# Create a data frame
cg_tie_df <- data.frame(from = from_vertices, to = to_vertices, weight = weights)

# Print the data frame
head(cg_tie_df)
cg_tie_df$from <- as.integer(as.factor(cg_tie_df$from))
cg_tie_df$to <- as.integer(as.factor(cg_tie_df$to))


#create networks
cg_tnet <- as.tnet(cg_tie_df, type = "weighted one-mode tnet")
cg.ig <- tnet_igraph(cg_tnet, type = "weighted one-mode tnet", directed = NULL)
cg.stat <- as.network.matrix(cg_tnet)

# Assign node names as vertex attributes to cg.ig & cg.stat network
V(cg.ig)$name <-  names.attr$name
network.vertex.names(cg.stat) <- names.attr$name
#Average Cluster Method
cg.ase <- equiv.clust(cg.stat,
                          equiv.fun = "sedist",
                      cluster.method = "average",
                          method = "hamming", 
                          mode = "graph")
plot(cg.ase, cg.ase$glabels)
# chosen blockmodel and chose partition partitions
cg_mod <- blockmodel(cg.stat, cg.ase, k=9)
# assign block membership to vertex attribute
set.vertex.attribute(cg.stat,
"role",
cg_mod$block.membership[match(cg.stat%v%"vertex.names",
cg_mod$plabels)])
names.attr<-data.frame(name = cg.stat%v%"vertex.names", block = cg.stat%v%"role")


names.attr <- names.attr |> mutate(category = case_when(
block == 1 ~ "Power Dynamics",
block == 2 ~ "Social Infrustructure",
block == 3 ~ "Economic & Government Structure",
block == 4 ~ "Regulation & Control",
block == 5 ~ "Global Challanges",
block == 6 ~ "Social & Global Issues",
block == 7 ~ "Trust & Rights",
block == 8 ~ "Media & Governence",
block == 9 ~ "Cultural Awareness & Equity",
))
cg.stat%v%"category" <- names.attr$category
```

# Creating the Graphs Based on Categories

In this section we are looking at the networks and seeing the results clustering. In these directed graphs the in-degree and out-degrees mean the following.

in-degrees - the node is influenced by the node that is pointing at it.

out-degree - this node is has an influence on the node it is pointing to.

```{r}

V(cg.ig)$role <- cg_mod$block.membership[match(V(cg.ig)$name, cg_mod$plabels)]
V(cg.ig)$category <- names.attr$category
# Create an empty list to store subgraphs
cg.subgraphs <- list()

# Loop through each role and create a subgraph
for (i in 1:9) {
  # Get the nodes for the current role
  role_nodes <- which(cg.stat %v% "role" == i)
  cat_nodes <- which(cg.stat %v% "category" == i)
  
  # Extract the subgraph for the current role
  cg.subgraphs[[i]] <- induced_subgraph(cg.ig, vids = role_nodes)
   V(cg.subgraphs[[i]])$node_names <- V(cg.ig)$role[role_nodes]
}
```

## Power Dynamics

Topics related to the exertion, distribution, and dynamics of power in society, politics, and economics. This category encompasses topics such as imperialism, racism, colonization, capitalism, and other forms of power dynamics.

**Imperialism** is the node with the most influence, as it has the strongest out degree.

**Colonization** is the most influenced, as it has the strongest in degree.

```{r}
plot(cg.subgraphs[[1]], layout = layout_with_fr(cg.subgraphs[[1]]), 
     main = "Power Dynamics",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)
```

## Social Infrastructure

Topics related to the foundational elements of society that support its functioning, including housing, education, infrastructure, and criminal justice.

For this category **Housing** is the overarching concept, affecting the other three nodes. What's also interesting is that Housing had the highest rating as a problem in the United States

**Criminal Justice** has the highest in-degree being influenced by all other concepts.

```{r}
plot(cg.subgraphs[[2]], layout = layout_with_fr(cg.subgraphs[[2]]), 
     main = "Social Infrustructure",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)
```

## Economic & Government Structure

Topics concerning the economic system, government structures, and their interactions, including economy, income/wealth, corporate wealth, federal/government structure, and related aspects.

**Transportation** has the highest out-degree

**Corporate wealth** &. **Fed/Govt structure.** has the highest in-degree

```{r}
plot(cg.subgraphs[[3]], layout = layout_with_fr(cg.subgraphs[[3]]), 
     main = "Economic & Government Structure",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)
```

## Regulation & Control

Topics pertaining to regulatory measures, control mechanisms, and governance practices, such as gun control, banking regulations, voting access, and other forms of regulation.

**Gun control** has the highest out degree influencing the other two nodes

**Voting Access** has the highest in degree being influenced by both nodess

```{r}
plot(cg.subgraphs[[4]], layout = layout_with_fr(cg.subgraphs[[4]]), 
     main = "Regulation & Control",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)
```

## Global Challenges

Topics addressing global issues and challenges that transcend national boundaries, including climate change, child poverty, nationalizing, digital literacy, and other global challenges.

**Climate Change** has the highest out-degree

**Digital Literacy** has the highest in-degree

```{r}
plot(cg.subgraphs[[5]], layout = layout_with_fr(cg.subgraphs[[5]]), 
     main = "Global Challanges",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)
```

## Social & Global Issues

Topics encompassing social and global issues that impact societies worldwide, such as AI, immigration, misinformation, pollution & plastic, and indigenous sovereignty.

**AI** has the highest out-degree

**Pollution & Plastic** has the highest in-degree

```{r}
plot(cg.subgraphs[[6]], layout = layout_with_fr(cg.subgraphs[[6]]), 
     main = "Social & Global Issues",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)
```

## Trust & Rights

Topics revolving around trust, rights, and societal values, including weakening of the global West, public trust, homeless rights, welfare systems, and civil rights.

**Homeless Rights** has the highest in degree

**Indigenous Sovereignty** has the highest out degree

```{r}
plot(cg.subgraphs[[7]], layout = layout_with_fr(cg.subgraphs[[7]]), 
     main = "Trust & Rights",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)
```

## Media & Governance

Topics concerning media, journalism, governance, and their roles in society, including journalism/media, foreign policy, insider trading, generational wealth, and Eurocentrism.

**Welfare Systems** has the highest out degree

**Insider trading** has the highest In- degree

```{r}
plot(cg.subgraphs[[8]], layout = layout_with_fr(cg.subgraphs[[8]]), 
     main = "Media & Governence",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)
```

## Cultural Awareness & Equity

Topics focusing on cultural awareness, equity, and diversity, such as cultural awareness & equity and Eurocentrism.

**Generational wealth** has the highest in degree going to the only other node in the catergory

```{r}

plot(cg.subgraphs[[9]], layout = layout_with_fr(cg.subgraphs[[9]]), 
     main = "Cultural Awareness & Equity",
     vertex.label.color = "black", vertex.label.family = "sans",
     vertex.label.dist = 1.5, edge.width = 2)

```
